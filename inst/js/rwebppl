#!/usr/bin/env node

var parseArgs = require('minimist');
var path = require('path');
var fs = require('fs');
var webppl = require('webppl')
var webppl_main = require('webppl/src/main');
var util = require('webppl/src/util');
var pkg = require('webppl/src/pkg');

function cutByBuffer(piecesSoFar, restOfStr, buff) {
  if (restOfStr.length < buff) {
    piecesSoFar.push(restOfStr);
  } else {
    piecesSoFar.push(restOfStr.slice(0,buff));
    cutByBuffer(piecesSoFar, restOfStr.slice(buff), buff);
  }
  return piecesSoFar;
}

function printWebPPLValue(x) {
  var serialized_x = util.serialize(x);
  var arrayed_x = cutByBuffer([], serialized_x, 8000);
  arrayed_x.forEach(function(entry) {
    console.log(entry);
  })
};

function main() {

	var argv = parseArgs(process.argv.slice(2));
  var programFile = argv._[0];

  var code = fs.readFileSync(programFile, 'utf8');

  var packagePaths = [
    path.join(path.dirname(programFile), 'node_modules'),
    pkg.globalPkgDir()
  ];

  var packages = util.asArray(argv.require).map(function(name_or_path) {
    return pkg.load(pkg.read(name_or_path, packagePaths, argv.verbose));
  });

  packages.forEach(function(pkg) {
    if (pkg.js) { global[pkg.js.identifier] = require(pkg.js.path); }
    pkg.headers.forEach(webppl.requireHeader);
  });

	webppl.run(code, function(s,x) {
	  printWebPPLValue(x);
	}, {
    extra: webppl_main.parsePackageCode(packages, false)
  })

}

main();
