#!/usr/bin/env node

var parseArgs = require('minimist');
var path = require('path');
var fs = require('fs');
var webppl = require('webppl')
var webppl_main = require('webppl/src/main');
var util = require('webppl/src/util');
var pkg = require('webppl/src/pkg');

function writeWebPPLValue(x, file) {
  if (dists.isDist(x) && x.isContinuous) {
    var serialized_x = util.serialize(x.toString());
  } else if (dists.isDist(x) && x.samples) {
    var serialized_x = util.serialize(x.samples);
  } else {
    var serialized_x = util.serialize(x);
  }
  // write to a temporary file and then rename it to output file name, so that
  // creating the output file is atomic
  fs.writeFile(file + "_tmp", serialized_x + "\n", function(err) {
    if (err) {
      console.error(err);
    } else {
      fs.rename(file + "_tmp", file, function(err) {
        if (err) {
          console.error(err);
        };
      });
    };
  });
};


function main() {

  var argv = parseArgs(process.argv.slice(2));
  var programFile = argv._[0];
  var outputFile = argv._[1];

  var code = fs.readFileSync(programFile, 'utf8');

  var packagePaths = [
    path.join(path.dirname(programFile), 'node_modules'),
    pkg.globalPkgDir()
  ];

  var packages = util.asArray(argv.require).map(function(name_or_path) {
    return pkg.load(pkg.read(name_or_path, packagePaths, argv.verbose));
  });

  packages.forEach(function(pkg) {
    if (pkg.js) { global[pkg.js.identifier] = require(pkg.js.path); }
    pkg.headers.forEach(webppl.requireHeader);
  });

  webppl.run(code, function(s,x) {
    writeWebPPLValue(x, outputFile);
  }, {
    bundles: webppl_main.parsePackageCode(packages, false)
  });

}

main();
